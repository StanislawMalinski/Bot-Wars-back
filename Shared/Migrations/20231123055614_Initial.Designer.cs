// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.DataAccess.Context;

#nullable disable

namespace Shared.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231123055614_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.ArchivedMatchPlayers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentId")
                        .IsUnique();

                    b.ToTable("ArchivedMatchPlayers");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.ArchivedMatches", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Played")
                        .HasColumnType("datetime2");

                    b.Property<long>("TournamentsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("ArchivedMatches");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Bot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BotFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("GameFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterfaceDefinition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvaiableForPlay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumbersOfPlayer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Contrains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayersLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentTitles")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("TournamentsDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasPlayedOut")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.TournamentReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("bodId")
                        .HasColumnType("bigint");

                    b.Property<long>("tournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("bodId");

                    b.HasIndex("tournamentId");

                    b.ToTable("TournamentReference");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.ArchivedMatchPlayers", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.ArchivedMatches", "archivedMatches")
                        .WithMany("ArchivedMatchPlayers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Player")
                        .WithMany("ArchivedMatchPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Tournament", "Tournament")
                        .WithOne("ArchivedMatchPlayers")
                        .HasForeignKey("Shared.DataAccess.DataBaseEntities.ArchivedMatchPlayers", "TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");

                    b.Navigation("archivedMatches");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.ArchivedMatches", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Game", "Game")
                        .WithMany("ArchivedMatches")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Tournament", "Tournament")
                        .WithMany("ArchivedMatches")
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Bot", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Game", "Games")
                        .WithMany("Bot")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Players")
                        .WithMany("Bot")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Tournament", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Game", "Game")
                        .WithMany("Tournaments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.TournamentReference", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Bot", "Bot")
                        .WithMany("TournamentReference")
                        .HasForeignKey("bodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Tournament", "Tournament")
                        .WithMany("TournamentReference")
                        .HasForeignKey("tournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.ArchivedMatches", b =>
                {
                    b.Navigation("ArchivedMatchPlayers");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Bot", b =>
                {
                    b.Navigation("TournamentReference");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Game", b =>
                {
                    b.Navigation("ArchivedMatches");

                    b.Navigation("Bot");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Player", b =>
                {
                    b.Navigation("ArchivedMatchPlayers");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Tournament", b =>
                {
                    b.Navigation("ArchivedMatchPlayers");

                    b.Navigation("ArchivedMatches");

                    b.Navigation("TournamentReference");
                });
#pragma warning restore 612, 618
        }
    }
}
