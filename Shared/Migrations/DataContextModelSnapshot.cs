// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.DataAccess.Context;

#nullable disable

namespace Shared.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.AchievementRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AchievementTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTypeId");

                    b.HasIndex("PlayerId");

                    b.ToTable("AchievementRecord");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.AchievementThresholds", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AchievementTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("Threshold")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTypeId");

                    b.ToTable("AchievementThresholds");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.AchievementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AchievementType");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Bot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BotFile")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BotFile = "quake3_bot_1",
                            GameId = 1L,
                            PlayerId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            BotFile = "quake3_bot_2",
                            GameId = 1L,
                            PlayerId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            BotFile = "zelda_bot_1",
                            GameId = 2L,
                            PlayerId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            BotFile = "zelda_bot_2",
                            GameId = 2L,
                            PlayerId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            BotFile = "fifa22_bot_1",
                            GameId = 3L,
                            PlayerId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            BotFile = "fifa22_bot_2",
                            GameId = 3L,
                            PlayerId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            BotFile = "amongus_bot_1",
                            GameId = 4L,
                            PlayerId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            BotFile = "amongus_bot_2",
                            GameId = 4L,
                            PlayerId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            BotFile = "minecraft_bot_1",
                            GameId = 5L,
                            PlayerId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            BotFile = "minecraft_bot_2",
                            GameId = 5L,
                            PlayerId = 10L
                        });
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.FileEntity", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("GameFile")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("GameInstructions")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("InterfaceDefinition")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsAvailableForPlay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumbersOfPlayer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GameFile = "Quake III Arena",
                            GameInstructions = "Eliminate the enemy players in fast-paced multiplayer battles.",
                            InterfaceDefinition = "First-Person Shooter (FPS)",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9224),
                            NumbersOfPlayer = 10
                        },
                        new
                        {
                            Id = 2L,
                            GameFile = "The Legend of Zelda: Breath of the Wild",
                            GameInstructions = "Embark on an epic adventure to defeat the Calamity Ganon and save Hyrule.",
                            InterfaceDefinition = "Action-Adventure",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9282),
                            NumbersOfPlayer = 1
                        },
                        new
                        {
                            Id = 3L,
                            GameFile = "FIFA 22",
                            GameInstructions = "Experience realistic football simulation with updated teams and gameplay.",
                            InterfaceDefinition = "Sports Simulation",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9285),
                            NumbersOfPlayer = 2
                        },
                        new
                        {
                            Id = 4L,
                            GameFile = "Among Us",
                            GameInstructions = "Work together to complete tasks while identifying the impostors among the crew.",
                            InterfaceDefinition = "Social Deduction",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9287),
                            NumbersOfPlayer = 7
                        },
                        new
                        {
                            Id = 5L,
                            GameFile = "Minecraft",
                            GameInstructions = "Build and explore a blocky world, mine resources, and survive.",
                            InterfaceDefinition = "Sandbox",
                            IsAvailableForPlay = false,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9290),
                            NumbersOfPlayer = 16
                        },
                        new
                        {
                            Id = 6L,
                            GameFile = "Cyberpunk 2077",
                            GameInstructions = "Navigate the futuristic open world of Night City as the mercenary V.",
                            InterfaceDefinition = "Action RPG",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9293),
                            NumbersOfPlayer = 1
                        },
                        new
                        {
                            Id = 7L,
                            GameFile = "Rocket League",
                            GameInstructions = "Play soccer with rocket-powered cars in this unique sports game.",
                            InterfaceDefinition = "Vehicular Soccer",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9295),
                            NumbersOfPlayer = 14
                        },
                        new
                        {
                            Id = 8L,
                            GameFile = "Call of Duty: Warzone",
                            GameInstructions = "Engage in intense battle royale action in the Call of Duty universe.",
                            InterfaceDefinition = "First-Person Shooter (Battle Royale)",
                            IsAvailableForPlay = false,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9297),
                            NumbersOfPlayer = 8
                        },
                        new
                        {
                            Id = 9L,
                            GameFile = "Animal Crossing: New Horizons",
                            GameInstructions = "Create and customize your own island paradise in a relaxing simulation.",
                            InterfaceDefinition = "Life Simulation",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9300),
                            NumbersOfPlayer = 5
                        },
                        new
                        {
                            Id = 10L,
                            GameFile = "Dota 2",
                            GameInstructions = "Compete in strategic team-based battles in this multiplayer online battle arena (MOBA).",
                            InterfaceDefinition = "MOBA",
                            IsAvailableForPlay = true,
                            LastModification = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9303),
                            NumbersOfPlayer = 10
                        });
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.MatchPlayers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayers");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Matches", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Played")
                        .HasColumnType("datetime2");

                    b.Property<long>("TournamentsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.NotificationOutbox", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("NotificationValue")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationOutboxes");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isBanned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "john.doe@example.com",
                            HashedPassword = "aasdsdas",
                            Login = "john_doe",
                            Points = 100L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 2L,
                            Email = "jane.smith@example.com",
                            HashedPassword = "sdfgdfg",
                            Login = "jane_smith",
                            Points = 150L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 3L,
                            Email = "alex.jones@example.com",
                            HashedPassword = "hjklhjk",
                            Login = "alex_jones",
                            Points = 200L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 4L,
                            Email = "emily.white@example.com",
                            HashedPassword = "qwertyui",
                            Login = "emily_white",
                            Points = 75L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 5L,
                            Email = "sam.wilson@example.com",
                            HashedPassword = "zxcvbnm",
                            Login = "sam_wilson",
                            Points = 120L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 6L,
                            Email = "olivia.brown@example.com",
                            HashedPassword = "poiuytre",
                            Login = "olivia_brown",
                            Points = 180L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 7L,
                            Email = "david.miller@example.com",
                            HashedPassword = "lkjhgfds",
                            Login = "david_miller",
                            Points = 90L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 8L,
                            Email = "emma.jenkins@example.com",
                            HashedPassword = "mnbvcxz",
                            Login = "emma_jenkins",
                            Points = 160L,
                            RoleId = 1,
                            isBanned = false
                        },
                        new
                        {
                            Id = 9L,
                            Email = "ryan.clark@example.com",
                            HashedPassword = "asdfghjk",
                            Login = "ryan_clark",
                            Points = 110L,
                            RoleId = 1,
                            isBanned = true
                        },
                        new
                        {
                            Id = 10L,
                            Email = "sara.taylor@example.com",
                            HashedPassword = "qazwsxed",
                            Login = "sara_taylor",
                            Points = 130L,
                            RoleId = 2,
                            isBanned = false
                        });
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.PointHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Gain")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Loss")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PointHistories");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Constraints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayersLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TournamentsDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasPlayedOut")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Constraints = "Participants must have a minimum skill level of intermediate.",
                            Description = "Compete in the ultimate Quake III Arena tournament and prove your skills in fast-paced multiplayer battles.",
                            GameId = 1L,
                            Image = "quakethreearena.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9334),
                            TournamentTitle = "Quake III Arena Championship",
                            TournamentsDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 2L,
                            Constraints = "Participants must complete the game on a specific difficulty level.",
                            Description = "Embark on a quest to become the master of The Legend of Zelda: Breath of the Wild. Solve puzzles and defeat foes to claim victory.",
                            GameId = 2L,
                            Image = "zeldabreathofthewild.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9344),
                            TournamentTitle = "Zelda Master Cup",
                            TournamentsDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 3L,
                            Constraints = "Teams must consist of real-world players.",
                            Description = "Experience the thrill of virtual football in the FIFA 22 World Cup. Compete with players from around the globe for the championship.",
                            GameId = 3L,
                            Image = "fifa22worldcup.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9347),
                            TournamentTitle = "FIFA 22 World Cup",
                            TournamentsDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 4L,
                            Constraints = "Players must use voice communication during the game.",
                            Description = "Test your deception skills in the Among Us Infiltration Challenge. Work as a crew member or impostor to secure victory.",
                            GameId = 4L,
                            Image = "amongusinfiltration.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9349),
                            TournamentTitle = "Among Us Infiltration Challenge",
                            TournamentsDate = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = true
                        },
                        new
                        {
                            Id = 5L,
                            Constraints = "Builds must adhere to a specific theme.",
                            Description = "Showcase your creative building skills in the Minecraft Building Showcase. Construct impressive structures and compete for recognition.",
                            GameId = 5L,
                            Image = "minecraftbuildingshowcase.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9352),
                            TournamentTitle = "Minecraft Building Showcase",
                            TournamentsDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 6L,
                            Constraints = "Participants must customize their character's appearance.",
                            Description = "Immerse yourself in the cyberpunk world of Night City. Compete in cyberwarfare challenges and emerge as the ultimate netrunner.",
                            GameId = 6L,
                            Image = "cyberpunk2077challenge.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9355),
                            TournamentTitle = "Cyberpunk 2077 Cyberwarfare Challenge",
                            TournamentsDate = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = true
                        },
                        new
                        {
                            Id = 7L,
                            Constraints = "Teams must consist of three players.",
                            Description = "Take part in high-flying, rocket-powered soccer action. Compete in the Rocket League Championship and score goals to victory.",
                            GameId = 7L,
                            Image = "rocketleaguechampionship.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9358),
                            TournamentTitle = "Rocket League Championship",
                            TournamentsDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 8L,
                            Constraints = "Players must adhere to the battle royale ruleset.",
                            Description = "Join the intense battle royale action in Call of Duty: Warzone. Compete against other squads to be the last team standing.",
                            GameId = 8L,
                            Image = "callofdutywarzone.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9361),
                            TournamentTitle = "Call of Duty: Warzone Battle Royale",
                            TournamentsDate = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 9L,
                            Constraints = "Islands must be designed within a specific theme.",
                            Description = "Create the most charming and unique island paradise in the Animal Crossing Island Showcase. Display your creativity and win accolades.",
                            GameId = 9L,
                            Image = "animalcrossingislandshowcase.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9363),
                            TournamentTitle = "Animal Crossing Island Showcase",
                            TournamentsDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        },
                        new
                        {
                            Id = 10L,
                            Constraints = "Teams must adhere to the standard Dota 2 competitive rules.",
                            Description = "Enter the world of strategic battles in the Dota 2 Clash of Titans. Assemble your team, choose your heroes, and conquer the opposition.",
                            GameId = 10L,
                            Image = "dota2clashoftitans.jpg",
                            PlayersLimit = 0,
                            PostedDate = new DateTime(2024, 1, 18, 17, 41, 24, 168, DateTimeKind.Local).AddTicks(9418),
                            TournamentTitle = "Dota 2 Clash of Titans",
                            TournamentsDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasPlayedOut = false
                        });
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.TournamentReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("botId")
                        .HasColumnType("bigint");

                    b.Property<long>("tournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("botId");

                    b.HasIndex("tournamentId");

                    b.ToTable("TournamentReferences");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LastModification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            botId = 1L,
                            tournamentId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LastModification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            botId = 2L,
                            tournamentId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            LastModification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            botId = 3L,
                            tournamentId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            LastModification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            botId = 4L,
                            tournamentId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            LastModification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            botId = 10L,
                            tournamentId = 5L
                        });
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.UserSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities._Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("Refid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScheduledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.AchievementRecord", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.AchievementType", "AchievementType")
                        .WithMany("AchievementRecords")
                        .HasForeignKey("AchievementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Player")
                        .WithMany("AchievementRecords")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementType");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.AchievementThresholds", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.AchievementType", "AchievementType")
                        .WithMany("AchievementThresholds")
                        .HasForeignKey("AchievementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementType");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Bot", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Game", "Games")
                        .WithMany("Bot")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Player")
                        .WithMany("Bot")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.MatchPlayers", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Matches", "Matches")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Player")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matches");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Matches", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Game", "Game")
                        .WithMany("Matches")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentsId")
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Player", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.PointHistory", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Player")
                        .WithMany("PlayerPointsList")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Tournament", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Game", "Game")
                        .WithMany("Tournaments")
                        .HasForeignKey("GameId")
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.TournamentReference", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Bot", "Bot")
                        .WithMany("TournamentReference")
                        .HasForeignKey("botId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.DataAccess.DataBaseEntities.Tournament", "Tournament")
                        .WithMany("TournamentReference")
                        .HasForeignKey("tournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.UserSettings", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities.Player", "Player")
                        .WithOne("UserSettings")
                        .HasForeignKey("Shared.DataAccess.DataBaseEntities.UserSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities._Task", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities._Task", "ParentTask")
                        .WithMany("ChildrenTask")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.AchievementType", b =>
                {
                    b.Navigation("AchievementRecords");

                    b.Navigation("AchievementThresholds");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Bot", b =>
                {
                    b.Navigation("TournamentReference");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Game", b =>
                {
                    b.Navigation("Bot");

                    b.Navigation("Matches");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Matches", b =>
                {
                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Player", b =>
                {
                    b.Navigation("AchievementRecords");

                    b.Navigation("Bot");

                    b.Navigation("MatchPlayers");

                    b.Navigation("PlayerPointsList");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("TournamentReference");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities._Task", b =>
                {
                    b.Navigation("ChildrenTask");
                });
#pragma warning restore 612, 618
        }
    }
}
