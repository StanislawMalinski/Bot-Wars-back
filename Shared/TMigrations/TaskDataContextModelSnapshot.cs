// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.DataAccess.Context;

#nullable disable

namespace Shared.TMigrations
{
    [DbContext(typeof(TaskDataContext))]
    partial class TaskDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities._Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("Refid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScheduledOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("bit");

                    b.Property<bool>("Synchronized")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities._Task", b =>
                {
                    b.HasOne("Shared.DataAccess.DataBaseEntities._Task", "ParentTask")
                        .WithMany("ChildrenTask")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("Shared.DataAccess.DataBaseEntities._Task", b =>
                {
                    b.Navigation("ChildrenTask");
                });
#pragma warning restore 612, 618
        }
    }
}
