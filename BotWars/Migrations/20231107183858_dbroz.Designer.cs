// <auto-generated />
using System;
using BotWars.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BotWars.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231107183858_dbroz")]
    partial class dbroz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BotWars.Gry.ArchivedMatchPlayers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId")
                        .IsUnique();

                    b.ToTable("ArchivedMatchPlayers");
                });

            modelBuilder.Entity("BotWars.Gry.ArchivedMatches", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Played")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("TournamentsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TournamentsId")
                        .IsUnique();

                    b.ToTable("ArchivedMatches");
                });

            modelBuilder.Entity("BotWars.Gry.Bot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BotFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("BotWars.Gry.Game", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("GameFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GameInstructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InterfaceDefinition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAvaiableForPlay")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumbersOfPlayer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BotWars.Gry.Player", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ArchivedMatchPlayersPlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedMatchPlayersPlayerId")
                        .IsUnique();

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BotWars.Gry.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Contrains")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("PlayersLimi")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TournamentsDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WasPlayedOut")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("BotWars.RockPaperScissorsData.RockPaperScissors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PlayerOneName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlayerTwoName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SymbolPlayerOne")
                        .HasColumnType("int");

                    b.Property<int>("SymbolPlayerTwo")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RockPaperScissors");
                });

            modelBuilder.Entity("BotWars.Gry.ArchivedMatchPlayers", b =>
                {
                    b.HasOne("BotWars.Gry.Tournament", "Tournament")
                        .WithOne("ArchivedMatchPlayers")
                        .HasForeignKey("BotWars.Gry.ArchivedMatchPlayers", "TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BotWars.Gry.ArchivedMatches", b =>
                {
                    b.HasOne("BotWars.Gry.Game", "Game")
                        .WithMany("ArchivedMatches")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotWars.Gry.Tournament", "Tournament")
                        .WithOne("ArchivedMatches")
                        .HasForeignKey("BotWars.Gry.ArchivedMatches", "TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BotWars.Gry.Game", b =>
                {
                    b.HasOne("BotWars.Gry.Bot", "Bot")
                        .WithOne("Games")
                        .HasForeignKey("BotWars.Gry.Game", "Id")
                        .HasPrincipalKey("BotWars.Gry.Bot", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("BotWars.Gry.Player", b =>
                {
                    b.HasOne("BotWars.Gry.ArchivedMatchPlayers", "ArchivedMatchPlayers")
                        .WithOne("Player")
                        .HasForeignKey("BotWars.Gry.Player", "ArchivedMatchPlayersPlayerId")
                        .HasPrincipalKey("BotWars.Gry.ArchivedMatchPlayers", "PlayerId");

                    b.HasOne("BotWars.Gry.Bot", "Bot")
                        .WithOne("Players")
                        .HasForeignKey("BotWars.Gry.Player", "Id")
                        .HasPrincipalKey("BotWars.Gry.Bot", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchivedMatchPlayers");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("BotWars.Gry.Tournament", b =>
                {
                    b.HasOne("BotWars.Gry.Game", "Game")
                        .WithMany("Tournaments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("BotWars.Gry.ArchivedMatchPlayers", b =>
                {
                    b.Navigation("Player");
                });

            modelBuilder.Entity("BotWars.Gry.Bot", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("BotWars.Gry.Game", b =>
                {
                    b.Navigation("ArchivedMatches");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("BotWars.Gry.Tournament", b =>
                {
                    b.Navigation("ArchivedMatchPlayers");

                    b.Navigation("ArchivedMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
